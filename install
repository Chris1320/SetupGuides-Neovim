#!/usr/bin/env bash

# This script has been tested on the following systems:
# - GNU bash v5.1.16 on Linux Mint 21
# - GNU bash v5.1.16 on Kali Linux Rolling
# - GNU bash v5.2.2 on Termux Terminal Emulator 0.118.0

# ? Set variables.
name="Neovim Config Installer"
version=(0 8 0)  # Installer version; different from config version and Neovim version.
title="${name} v${version[*]:0:1}.${version[*]:1:1}.${version[*]:2:1}"

target_branch="rewrite"  # The branch to which the configs will be pulled from.

current_wd="${PWD}"
installation_files="${PWD}/src"
nvim_config_path="${HOME}/.config/nvim"
nvim_data_path="${HOME}/.local/share/nvim"
packer_installation_path="${nvim_data_path}/site/pack/packer/start/packer.nvim"
flag_file="${nvim_data_path}/.plugins_installed"  # The file that is created after installing the config.

filelist="files.txt"
filelist_url="https://raw.githubusercontent.com/SetupGuides/Neovim/${target_branch}/${filelist}"

min_nvim_version=(0 8 0)  # Minimum Neovim version required.

# Enable force re-install if `--reinstall` is passed as argument.
if [[ "$1" = "--reinstall" ]]; then
    force_reinstall=true

else
    force_reinstall=false

fi

echo
echo "$title"
echo

# ? Check requirements.
echo "Checking requirements..."
if ! [[ -x "$(command -v git)" ]]; then  # Check if Git is installed.
    echo "Git       : not found"
    echo
    echo "\`git\` is not installed. Please install git and try again."
    echo
    echo "  [REASON]: Used by the package manager and most plugins."
    echo "- \`sudo apt update && sudo apt install git\`; or visit"
    echo "- https://git-scm.com/downloads"
    exit 1

else
    echo "Git       : installed"
fi

if ! [[ -x "$(command -v gcc)" ]]; then
    if ! [[ -x "$(command -v clang)" ]]; then
        echo "C compiler: not found"
        echo
        echo "\`gcc\` or \`clang\` is not installed."
        echo "Please install either of the two and try again."
        echo
        echo "  [REASON]: Used by tree-sitter and telescope-fzf-native plugins."
        echo "- \`sudo apt update && sudo apt install gcc\`"
        exit 2

    else
        echo "C compiler: clang"
    fi

else
    echo "C compiler: gcc"
fi

if ! [[ -x "$(command -v npm)" ]]; then
    echo "npm       : not found"
    echo
    echo "\`npm\` is not installed. Please install it and try again."
    echo
    echo "  [REASON]: Used by Mason plugin and most LSP servers."
    echo "- \`sudo apt update && sudo apt install nodejs npm\`; or visit"
    echo "- https://nodejs.org/en/download/"
    exit 4

else
    echo "npm       : installed"
fi

echo
if ! [[ -x "$(command -v nvim)" ]]; then  # Check if Neovim is installed.
    echo "\`nvim\` is not installed. Please install nvim and try again."
    echo
    echo "- \`sudo apt update && sudo apt install neovim\`; or visit"
    echo "- https://github.com/neovim/neovim/releases/latest"
    exit 5

else  # If Neovim is installed, check its version.
    echo "Neovim is installed. Checking its version..."
    nvim_version=$(nvim -v)
    nvim_version=${nvim_version[*]:5:6}  # Get the version of Neovim using `nvim -v` in format `vX.X.X`.
    echo "Detected Neovim version: ${nvim_version}"

    # Calculate the value of the user's Neovim version and the required minimum Neovim version using positional notation since Neovim uses semantic versioning.
    user_nvim_version_value=$(( (${nvim_version[*]:1:1} * (10 ** 2)) + (${nvim_version[*]:3:1} * (10 ** 1)) + (${nvim_version[*]:5:1} * (10 ** 0)) ))
    min_nvim_version_value=$(( (${min_nvim_version[*]:0:1} * (10 ** 2)) + (${nvim_version[*]:3:1} * (10 ** 1)) + (${nvim_version[*]:5:1} * (10 ** 0)) ))
    if [[ "$user_nvim_version_value" -lt "$min_nvim_version_value" ]]; then
        echo "Neovim ${nvim_version} is not supported."
        echo "Please upgrade to at least v${min_nvim_version[*]:0:1}.${min_nvim_version[*]:1:1}.${min_nvim_version[*]:2:1} or higher and try again."
        exit 6

    else
        echo "User's Neovim version is supported."
    fi
fi

# Check what to do.
if [[ -e "${nvim_config_path}" ]] && ! $force_reinstall; then
    config_perform="update"

else
    config_perform="install"
fi

if [[ -e "${packer_installation_path}" ]] && ! $force_reinstall; then
    packer_perform="update"

else
    packer_perform="install"

fi

# ? Ask for user confirmation.
echo
echo "This will perform the following:"
echo
echo "- ${config_perform} ${name} on \`${nvim_config_path}\`."
echo "- ${packer_perform} packer.nvim on \`${packer_installation_path}\`."
echo
echo "This will overwrite existing files in the said directory."
echo
while true; do
    printf "Are you sure? (Y/n) > "
    read -r installation_confirmation

    if [[ "${installation_confirmation}" == "" || "${installation_confirmation}" =~ ^[y|Y].* ]]; then
        printf "Installing %s customization files...\n" "${title}"
        break

    elif [[ "${installation_confirmation}" =~ ^[n|N].* ]]; then
        echo "Cancelling installation."
        exit 7

    else
        echo "Unknown answer."
        echo

    fi
done

# ? Install the customization files.
echo

if [[ "${config_perform}" = "install" ]]; then
    if [[ -e "${flag_file}" ]]; then
        printf "Removing flag file in \`%s\`...\r" "${flag_file}"
        rm -- "${flag_file}"
        printf "Removing flag file in \`%s\`... Done!\n" "${flag_file}"

    else
        echo "No existing flag file found in \`${flag_file}\`."

    fi
fi

# Install or update, remove the configuration files.
if [[ -e "${nvim_config_path}" ]]; then
    printf "Removing existing files in \`%s\`...\r" "${nvim_config_path}"
    rm -r -- "${nvim_config_path}"  # Delete the existing Neovim configuration directory.
    printf "Removing existing files in \`%s\`... Done!\n" "${nvim_config_path}"

else
    echo "No existing files found in \`${nvim_config_path}\`."

fi

# Only remove the packer installation files if performing a new install.
if [[ "${packer_perform}" = "install" ]]; then
    if [[ -e "${packer_installation_path}" ]]; then
        printf "Removing existing files in \`%s\`...\r" "${packer_installation_path}"
        rm -rf -- "${packer_installation_path}"
        printf "Removing existing files in \`%s\`... Done!\n" "${packer_installation_path}"

    else
        echo "No existing files found in \`${packer_installation_path}\`."

    fi
fi

if [[ "${packer_perform}" = "install" ]]; then
    echo
    if ! git clone --depth=1 "https://github.com/wbthomason/packer.nvim.git" "${packer_installation_path}"; then
        echo "Failed to clone packer.nvim"
        exit 8

    fi
    echo

else
    echo
    if ! cd "${packer_installation_path}"; then
        echo "Git pull failed. Changing directory to Packer installation path failed."
        cd "${current_wd}" || exit 9
        exit 9
    fi
    if ! git pull; then
        echo "Git pull failed."
        cd "${current_wd}" || exit 9
        exit 9
    fi
    if ! cd "${current_wd}"; then
        echo "Git pull failed. Unable to get back to directory."
        exit 9
    fi
    echo

fi

# Check if the installation files exist.
if [[ -d "$installation_files" ]]; then
    printf "Copying customization files to \`%s\`...\r" "${nvim_config_path}"
    if cp -r "$installation_files" "$nvim_config_path"; then  # Copy the customization files to the Neovim configuration directory.
        printf "Copying customization files to \`%s\`... Done!\n" "${nvim_config_path}"
        echo "Please run \`nvim\` to finish the installation."
        exit 0

    else
        printf "Copying customization files to \`%s\`... Failed!\n" "${nvim_config_path}"
        exit 10
    fi

else
    echo "Downloading file list..."
    files_to_download=$(curl "${filelist_url}")
    printf "Downloading customization files to \`%s\`...\r" "${nvim_config_path}"
    for file in ${files_to_download}; do
        pull_url="${file//<branch>/${target_branch}}"
        output_filepath="${file##*"${target_branch}"/}"
        #if ! curl -sSfL "${file}" -o "${nvim_config_path}/init.lua"; then
        #    printf "Downloading customization files to \`%s\`... Failed!\n" "${nvim_config_path}"
        #    exit 3
        #fi
        echo "$pull_url"
        echo "$output_filepath"
    done

    printf "Downloading customization files to \`%s\`... Done!\n" "${nvim_config_path}"
    echo "Please run \`nvim\` to finish the installation."
    exit 0
fi
