#!/usr/bin/env bash

# This script has been tested on the following systems:
# - GNU bash v5.1.16 on Arch Linux
# - GNU bash v5.1.16 on Linux Mint 21
# - GNU bash v5.1.16 on Kali Linux Rolling
# - GNU bash v5.2.2 on Termux Terminal Emulator 0.118.0

# ? Set variables.
name="Neovim Config Installer"
# Installer version; different from config version and Neovim version.
version=(0 13 0)
title="${name} v${version[*]:0:1}.${version[*]:1:1}.${version[*]:2:1}"

target_branch="main"  # The branch to which the configs will be pulled from.
installation_files="${PWD}/src"
nvim_config_path="${HOME}/.config/nvim"
filelist="files.txt"

min_nvim_version=(0 9 0)  # Minimum Neovim version required.

echo
echo "$title"
echo

# ? Check requirements.
echo "Checking requirements..."
if ! [[ -x "$(command -v git)" ]]; then  # Check if Git is installed.
    echo "Git       : not found"
    echo
    echo "\`git\` is not installed. Please install git and try again."
    echo
    echo "- \`sudo apt update && sudo apt install git\`"
    echo "- https://git-scm.com/downloads"
    exit 1

else
    echo "Git       : $(command -v git)"
fi

if ! [[ -x "$(command -v gcc)" ]]; then
    if ! [[ -x "$(command -v clang)" ]]; then
        echo "C compiler: not found"
        echo
        echo "\`gcc\` or \`clang\` is not installed."
        echo "Please install either of the two and try again."
        echo
        echo "- \`sudo apt update && sudo apt install gcc\`"
        exit 2

    else
        echo "C compiler: $(command -v clang)"
    fi

else
    echo "C compiler: $(command -v gcc)"
fi

if ! [[ -x "$(command -v make)" ]]; then
    echo "make      : not found"
    echo
    echo "\`make\` is not installed."
    echo "Please install it and try again."
    echo
    echo "- \`sudo apt update && sudo apt install make\`"
    exit 11

else
    echo "make      : $(command -v make)"
fi

if ! [[ -x "$(command -v npm)" ]]; then
    echo "npm       : not found"
    echo
    echo "\`npm\` is not installed. Please install it and try again."
    echo
    echo "- \`sudo apt update && sudo apt install nodejs npm\`"
    echo "- https://nodejs.org/en/download/"
    exit 4

else
    echo "npm       : $(command -v npm)"
fi

echo
if ! [[ -x "$(command -v nvim)" ]]; then  # Check if Neovim is installed.
    echo "\`nvim\` is not installed. Please install nvim and try again."
    echo
    echo "- \`sudo apt update && sudo apt install neovim\`"
    echo "- https://github.com/neovim/neovim/releases/latest"
    exit 5

else  # If Neovim is installed, check its version.
    echo "Neovim is installed. Checking its version..."
    nvim_version=$(nvim -v | grep -oP 'v\d+\.\d+\.\d+')  # Get the version of Neovim using `nvim -v` in format `vX.X.X`.
    echo "Detected Neovim version: ${nvim_version}"
    nvim_version_x=$(echo "${nvim_version}" | grep -oP '\d+' | sed -n 1p)
    nvim_version_y=$(echo "${nvim_version}" | grep -oP '\d+' | sed -n 2p)
    nvim_version_z=$(echo "${nvim_version}" | grep -oP '\d+' | sed -n 3p)
    nvim_version_supported=true

    # Check if the major version of Neovim is supported.
    if [[ "$nvim_version_x" -lt "${min_nvim_version[*]:0:1}" ]]; then
        nvim_version_supported=false
    fi

    # Check if the minor version of Neovim is supported.
    if [[ "$nvim_version_y" -lt "${min_nvim_version[*]:1:1}" ]]; then
        nvim_version_supported=false
    fi

    # Check if the patch version of Neovim is supported.
    if [[ "$nvim_version_z" -lt "${min_nvim_version[*]:2:1}" ]]; then
        nvim_version_supported=false
    fi

    if [[ "$nvim_version_supported" == false ]]; then
        echo "Neovim ${nvim_version} is not supported."
        echo "Please upgrade to at least v${min_nvim_version[*]:0:1}.${min_nvim_version[*]:1:1}.${min_nvim_version[*]:2:1} or higher and try again."
        exit 6
    else
        echo "User's Neovim version is supported."
    fi
fi

# ? Ask for user confirmation.
echo
echo "This will install ${name} on \`${nvim_config_path}\`."
echo
echo "This will overwrite existing files in the said directory."
echo
while true; do
    printf "Are you sure? (Y/n) > "
    read -r installation_confirmation

    if [[ "${installation_confirmation}" == "" || "${installation_confirmation}" =~ ^[y|Y].* ]]; then
        printf "Installing %s customization files...\n" "${title}"
        break

    elif [[ "${installation_confirmation}" =~ ^[n|N].* ]]; then
        echo "Cancelling installation."
        exit 7

    else
        echo "Unknown answer."
        echo
    fi
done

echo

# Remove the configuration files.
if [[ -e "${nvim_config_path}" ]]; then
    printf "Removing existing files in \`%s\`...\r" "${nvim_config_path}"
    rm -r -- "${nvim_config_path}"  # Delete the existing Neovim configuration directory.
    printf "Removing existing files in \`%s\`... Done!\n" "${nvim_config_path}"

else
    echo "No existing files found in \`${nvim_config_path}\`."

fi

# Check if the installation files exist.
if [[ -d "$installation_files" ]]; then
    printf "Copying customization files to \`%s\`...\r" "${nvim_config_path}"
    # Copy the customization files to the Neovim configuration directory.
    if cp -r "$installation_files" "$nvim_config_path"; then
        printf "Copying customization files to \`%s\`... Done!\n" "${nvim_config_path}"
        echo "Please run \`nvim\` to finish the installation."
        exit 0

    else
        printf "Copying customization files to \`%s\`... Failed!\n" "${nvim_config_path}"
        exit 10
    fi

else
    filelist_url="https://raw.githubusercontent.com/SetupGuides/Neovim/${target_branch}/${filelist}"

    echo "Downloading file list..."
    files_to_download=$(curl -sSfL "${filelist_url}")
    printf "Downloading customization files to \`%s\`...\r" "${nvim_config_path}"
    for file in ${files_to_download}; do
        pull_url="${file//<branch>/${target_branch}}"
        output_filepath=${file##*/src/}
        if ! curl -sSfL "${pull_url}" --create-dirs --output "${nvim_config_path}/${output_filepath}"; then
            printf "Downloading customization files to \`%s\`... Failed!\n" "${nvim_config_path}"
            exit 3
        fi
    done

    printf "Downloading customization files to \`%s\`... Done!\n" "${nvim_config_path}"
    echo "Please run \`nvim\` to finish the installation."
    exit 0
fi
